<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>

<#+ 
public void T4EmitConstructor(string constructorDefinition)
{
#>
<#= constructorDefinition #>
{
	OnConstructed();	
}
<#+ 
}

private void T4EmitVoidOperation(MethodInfo method)
{
#>
// Generated by SessionProxyEmitter.EmitVoidOperation
<#= code.OverrideMethodSignature(method) #>
{
	base.ExecuteOperation("<#= method.Name #>", () => <#= code.CallBaseMethod(method) #>);
}	
<#+ 
}
private void T4EmitTypeOperation(MethodInfo method)
{
#>
// Generated by SessionProxyEmitter.T4EmitTypeOperation
<#= code.OverrideMethodSignature(method) #>
{
	OnOperationBegin("<#= method.Name #>");
	<#= code.GetCSharpTypeName(method.ReturnType) #> value = default(<#= code.GetCSharpTypeName(method.ReturnType) #>);
	try
	{
    	value = <#= code.CallBaseMethod(method) #>;
		OnOperationSuccess("<#= method.Name #>");
	}
	catch(Exception e)
	{
		OnOperationError("<#= method.Name #>", e);
	}		
	return value;
}	
<#+ 
}

internal void T4EmitDataProperty(PropertyInfo property, string setAccessor)
{
#>
// Generated by SessionProxyEmitter.T4EmitDataProperty
// Proxy commented out because no value is addded. To add code to 
// this property, go to SessionProxyEmitter.tt T4EmitDataProperty
// and add the code there. 
//<#= code.OverridePropertySignature(property) #>
//{
//	get
//	{
//		return base.<#= property.Name #>;
//	}
//	<#= setAccessor #>set
//	{
//		base.<#= property.Name #> = value;
//	}
//}
<#+ 
}
#>